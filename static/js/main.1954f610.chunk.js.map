{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","currentX","currentItem","isScrolling","this","props","step","frameSize","images","end","currentImages","i","index","length","push","infinite","itemWidth","animationDuration","currentIndex","safeStep","totalFrames","minX","timerId","setInterval","setState","setTimeout","clearInterval","newItem","maxX","frameStyles","width","listStyle","transform","itemStyles","getCurrentImages","keys","count","generateKeys","className","style","map","src","alt","String","type","onClick","scrollLeft","disabled","scrollRight","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1954f610.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\nfunction generateKeys(count: number): number[] {\n  const keys = [];\n\n  for (let i = 0; i < count; i += 1) {\n    keys.push(i);\n  }\n\n  return keys;\n}\n\ntype Props = {\n  images: string[];\n  frameSize: number;\n  itemWidth: number;\n  step: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\ntype State = {\n  currentX: number;\n  currentItem: number;\n  isScrolling: boolean;\n};\n\n// eslint-disable-next-line\nclass Carousel extends React.Component<Props, State> {\n  state = {\n    currentX: 0,\n    currentItem: 0,\n    isScrolling: false,\n  };\n\n  getCurrentImages(): string[] {\n    const { currentItem } = this.state;\n    const { step, frameSize, images } = this.props;\n\n    const start = currentItem - step;\n    const end = currentItem + frameSize + step;\n    const currentImages = [];\n\n    for (let i = start; i < end; i += 1) {\n      let index = i;\n\n      if (index >= images.length) {\n        index %= images.length;\n      }\n\n      if (index < 0) {\n        index = images.length - 1 + ((index + 1) % images.length);\n      }\n\n      currentImages.push(images[index]);\n    }\n\n    return currentImages;\n  }\n\n  scrollRight() {\n    const {\n      infinite,\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n    } = this.props;\n\n    const { currentItem: currentIndex } = this.state;\n\n    let safeStep = step;\n\n    if (!infinite) {\n      safeStep = (currentIndex + step < images.length - frameSize)\n        ? step\n        : images.length - frameSize - currentIndex;\n    }\n\n    const fps = 60;\n    const totalFrames = (animationDuration / 1000) * fps;\n\n    const minX = this.state.currentX - itemWidth * safeStep;\n\n    const timerId = setInterval(() => {\n      this.setState(({ currentX }) => (\n        {\n          currentX: ((currentX > minX)\n            ? currentX - (itemWidth * safeStep) / totalFrames\n            : minX),\n        }\n      ));\n    }, animationDuration / totalFrames);\n\n    this.setState({ isScrolling: true });\n\n    setTimeout(() => {\n      clearInterval(timerId);\n\n      this.setState(({ currentItem }) => {\n        let newItem = currentItem + safeStep;\n\n        if (infinite) {\n          newItem = (newItem < images.length)\n            ? newItem\n            : newItem % images.length;\n        } else {\n          newItem = (newItem < images.length)\n            ? newItem\n            : images.length - 1;\n        }\n\n        return {\n          isScrolling: false,\n          currentX: 0,\n          currentItem: newItem,\n        };\n      });\n    }, animationDuration);\n  }\n\n  scrollLeft() {\n    const {\n      infinite,\n      images,\n      itemWidth,\n      step,\n      animationDuration,\n    } = this.props;\n\n    const { currentItem: currentIndex } = this.state;\n\n    let safeStep = step;\n\n    if (!infinite) {\n      safeStep = (currentIndex - step >= 0)\n        ? step\n        : currentIndex;\n    }\n\n    const fps = 60;\n    const totalFrames = (animationDuration / 1000) * fps;\n\n    const maxX = this.state.currentX + itemWidth * safeStep;\n\n    const timerId = setInterval(() => {\n      this.setState(({ currentX }) => (\n        {\n          currentX: ((currentX < maxX)\n            ? currentX + (itemWidth * safeStep) / totalFrames\n            : maxX),\n        }\n      ));\n    }, animationDuration / totalFrames);\n\n    this.setState({ isScrolling: true });\n\n    setTimeout(() => {\n      clearInterval(timerId);\n\n      this.setState(({ currentItem }) => {\n        let newItem = currentItem - safeStep;\n\n        if (infinite) {\n          newItem = (newItem >= 0)\n            ? newItem\n            : images.length - 1 + ((newItem + 1) % images.length);\n        } else {\n          newItem = (newItem >= 0)\n            ? newItem\n            : 0;\n        }\n\n        return {\n          isScrolling: false,\n          currentX: 0,\n          currentItem: newItem,\n        };\n      });\n    }, animationDuration);\n  }\n\n  render() {\n    const {\n      images,\n      infinite,\n      frameSize,\n      itemWidth,\n      step,\n    } = this.props;\n\n    const { currentItem } = this.state;\n\n    const { isScrolling } = this.state;\n\n    const { currentX } = this.state;\n\n    const frameStyles = {\n      width: `${itemWidth * frameSize}px`,\n    };\n\n    const defaultOffset = -itemWidth * step;\n\n    const listStyle = {\n      transform: `translateX(${defaultOffset + currentX}px)`,\n    };\n\n    const itemStyles = {\n      width: `${itemWidth}px`,\n    };\n\n    const currentImages = this.getCurrentImages();\n    const keys = generateKeys(currentImages.length);\n\n    return (\n      <div\n        className=\"Carousel\"\n        style={frameStyles}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={listStyle}\n        >\n          {\n            currentImages.map((src, index) => (\n              <li key={keys[index]}>\n                <img\n                  src={src}\n                  alt={String(index)}\n                  style={itemStyles}\n                />\n              </li>\n            ))\n          }\n        </ul>\n        <div className=\"Carousel__buttons\">\n          <button\n            className=\"Carousel__button\"\n            type=\"button\"\n            onClick={() => this.scrollLeft()}\n            disabled={\n              isScrolling\n              || (!infinite && currentItem - step < 0)\n            }\n          >\n            Prev\n          </button>\n          <button\n            className=\"Carousel__button\"\n            type=\"button\"\n            onClick={() => this.scrollRight()}\n            disabled={\n              isScrolling\n              || (!infinite && currentItem + step > images.length - 1)\n            }\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n  };\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Carousel\n          images={images}\n          frameSize={3}\n          itemWidth={130}\n          step={3}\n          animationDuration={1000}\n          infinite\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}